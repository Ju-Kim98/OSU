answers-lab2
CS544 5/1/2023
JuHyunKim

Q1. Assuming that the following JOS kernel code is correct, 
what type should variable 'x' have, 'uintptr_t' ore 'physaddr_t'?
<JOS kernel code>
mystery_t x;
char* value = return_a_pointer();
*value = 10;
x = (mystery_t) value;

A: x should have uintptr_t type. Beacuse 'value' is dereferenced, so it must be virtual address.


Q2. What entries (rows) in the page directory have been filled in at this point? What addresses do they map and where do they point?
In other words, fill out this table as much as possible.

    ENTRY       BASE VIRTUAL ADDRESS        POINTS TO (LOGICALLY)
    ----------------------------------------------------------------------------------------------
    1023        0xffc0000                   Page table for top 4MB of physical memory
    1022        0xff80000                   Page table for 2nd to top 4MB of  physical memory
    ...         ...                         ...
    960         0xf0000000                  physical memory at KERNBASE (points to kernel)
    959         0xefc00000                  current page table (bootstack)
    957         0XEf400000                  kern_pgdir[PDX(UVPT)]
    956         0xef000000                  UPPAGES
    ...         ...                         ...
    2           0x00800000                  UTEXT
    1           0x00400000                  UTEMP
    0           0x00000000                  empty memory


Q3. We have placed the kernel and user environment in the same address space. Why will user
programs not be able to read or write the kernel’s memory? What specific mechanisms
protect the kernel memory?

A: The user programs can't read or write the kernel's memory because PTE_U is not enble, 
    so the code in the user space can't be accessed to the kernel’s memory.
    The paging mechanism protects kenrel memory.


Q4. What is the maximum amount of physical memory that this operating system can support?
Why?
운영체제에서 지원할 수 있는 물리적 메모리의 최대 크기는? 왜?

A: We can have 2GB physical memory. 
    There are 4MB of pageinfo and each pageingo is 8byte. 512*4KB = 2GB


Q5. How much space overhead is there for managing memory, if we actually had the maximum
amount of physical memory? How is this overhead broken down?

 A: Almost 4MB. page table 2MB and page directory 4KB if we have 2GB physical memory.
    4mb+2mb+4kb(1page's directory table) = 6mb+4kb


Q6. Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. Immediately after we turn
on paging, EIP is still a low number (a little over 1MB). At what point do we transition to
running at an EIP above KERNBASE? What makes it possible for us to continue executing
at a low EIP between when we enable paging and when we begin running at an EIP above
KERNBASE? Why is this transition necessary?


A: At file 'entry.s' we can know what point do we transition to running at an EIP above KERNBASE.

    # Now paging is enabled, but we're still running at a low EIP
        # (why is this okay?).  Jump up above KERNBASE before entering
        # C code.
        mov	$relocated, %eax
        jmp	*%eax
    relocated:

    After jum instruction, entry_pgdir also maps va[0-4M) to pa[0-4M). 
    The reason why this transition necessary is the va[0, 4M) will be disapper after kern_pgdir loaded.